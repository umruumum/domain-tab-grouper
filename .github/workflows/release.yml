name: Release Chrome Extension

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format v*.*.* (e.g., v1.0.0)"
            exit 1
          fi

      - name: Check manifest.json version
        run: |
          MANIFEST_VERSION=$(jq -r '.version' manifest.json)
          TAG_VERSION="${{ steps.version.outputs.version_number }}"
          
          echo "Manifest version: $MANIFEST_VERSION"
          echo "Tag version: $TAG_VERSION"
          
          if [ "$MANIFEST_VERSION" != "$TAG_VERSION" ]; then
            echo "Warning: manifest.json version ($MANIFEST_VERSION) does not match tag version ($TAG_VERSION)"
            echo "This is not an error, but consider updating manifest.json"
          fi

      - name: Create extension package
        run: |
          # Create temporary directory for extension files
          mkdir -p extension-package
          
          echo "üì¶ Determining required files for Chrome extension..."
          
          # Core required files for Chrome extension
          REQUIRED_FILES=(
            "manifest.json"
            "background.js"
            "popup.html"
            "popup.js"
          )
          
          # Check for optional but commonly needed files
          OPTIONAL_FILES=(
            "content.js"
            "constants.js" 
            "utils.js"
            "options.html"
            "options.js"
          )
          
          # Copy required files (must exist)
          echo "üìã Copying required files..."
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              cp "$file" extension-package/
              echo "‚úÖ $file"
            else
              echo "‚ùå Required file missing: $file"
              exit 1
            fi
          done
          
          # Copy optional files (if they exist)
          echo "üìã Copying optional files..."
          for file in "${OPTIONAL_FILES[@]}"; do
            if [ -f "$file" ]; then
              cp "$file" extension-package/
              echo "‚úÖ $file"
            else
              echo "‚ÑπÔ∏è  Optional file not found: $file"
            fi
          done
          
          # Copy icons directory if it exists
          if [ -d "icons" ]; then
            cp -r icons extension-package/
            echo "‚úÖ icons/ directory"
          else
            echo "‚ÑπÔ∏è  No icons directory found"
          fi
          
          # Copy any other asset directories commonly used in Chrome extensions
          for dir in "images" "css" "fonts"; do
            if [ -d "$dir" ]; then
              cp -r "$dir" extension-package/
              echo "‚úÖ $dir/ directory"
            fi
          done
          
          # List all files that will be included
          echo ""
          echo "üì¶ Package contents:"
          find extension-package -type f | sort
          
          # Create zip file
          cd extension-package
          zip -r "../domain-tab-grouper-${{ steps.version.outputs.version }}.zip" .
          cd ..
          
          echo ""
          echo "‚úÖ Package created: domain-tab-grouper-${{ steps.version.outputs.version }}.zip"
          echo "üìä Package size: $(du -h *.zip | cut -f1)"

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "üìù Generating release notes for $VERSION..."
          
          # Get previous tag for changelog generation
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate change summary
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "üîç Changes since $PREVIOUS_TAG:"
            COMMIT_RANGE="${PREVIOUS_TAG}..HEAD"
          else
            echo "üîç Initial release - showing last 10 commits:"
            COMMIT_RANGE="HEAD~10..HEAD"
          fi
          
          # Get commit messages and classify them
          FEATURES=""
          FIXES=""
          OTHERS=""
          
          while IFS= read -r commit; do
            if [[ $commit == feat* ]] || [[ $commit == *"Êñ∞Ê©üËÉΩ"* ]] || [[ $commit == *"ËøΩÂä†"* ]]; then
              FEATURES="${FEATURES}\n- ${commit#*: }"
            elif [[ $commit == fix* ]] || [[ $commit == *"‰øÆÊ≠£"* ]] || [[ $commit == *"„Éê„Ç∞"* ]]; then
              FIXES="${FIXES}\n- ${commit#*: }"
            else
              OTHERS="${OTHERS}\n- ${commit#*: }"
            fi
          done < <(git log --pretty=format:"%s" $COMMIT_RANGE 2>/dev/null | head -20)
          
          # Create release notes based on actual changes
          cat > release_notes.md << EOF
          ## üéâ Domain Tab Grouper $VERSION
          
          „Éâ„É°„Ç§„É≥„Éô„Éº„Çπ„Åß„Çø„Éñ„ÇíËá™Âãï„Ç∞„É´„Éº„ÉóÂåñ„Åô„ÇãChromeÊã°ÂºµÊ©üËÉΩ„ÅÆÊñ∞„Éê„Éº„Ç∏„Éß„É≥„Åß„Åô„ÄÇ
          
          EOF
          
          # Add features if any
          if [ -n "$FEATURES" ]; then
            cat >> release_notes.md << EOF
          ## ‚ú® Êñ∞Ê©üËÉΩ„ÉªÊîπÂñÑ
          $(echo -e "$FEATURES")
          
          EOF
          fi
          
          # Add fixes if any
          if [ -n "$FIXES" ]; then
            cat >> release_notes.md << EOF
          ## üêõ „Éê„Ç∞‰øÆÊ≠£
          $(echo -e "$FIXES")
          
          EOF
          fi
          
          # Add other changes if any
          if [ -n "$OTHERS" ]; then
            cat >> release_notes.md << EOF
          ## üîß „Åù„ÅÆ‰ªñ„ÅÆÂ§âÊõ¥
          $(echo -e "$OTHERS")
          
          EOF
          fi
          
          # Add installation instructions
          cat >> release_notes.md << EOF
          ## üì¶ „Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï
          
          1. \`domain-tab-grouper-$VERSION.zip\` „Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          2. „Éï„Ç°„Ç§„É´„ÇíËß£Âáç
          3. Chrome„ÅßÊã°ÂºµÊ©üËÉΩ„ÇíË™≠„ÅøËæº„Åø:
             - \`chrome://extensions/\` „ÇíÈñã„Åè
             - „Äå„Éá„Éô„É≠„ÉÉ„Éë„Éº„É¢„Éº„Éâ„Äç„ÇíÊúâÂäπÂåñ
             - „Äå„Éë„ÉÉ„Ç±„Éº„Ç∏Âåñ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÊã°ÂºµÊ©üËÉΩ„ÇíË™≠„ÅøËæº„ÇÄ„Äç„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Ëß£Âáç„Åó„Åü„Éï„Ç©„É´„ÉÄ„ÇíÈÅ∏Êäû
          
          ## üõ†Ô∏è ÊäÄË°ì‰ªïÊßò
          
          - **Manifest Version**: 3.0
          - **ÂøÖË¶Å„Å™Ê®©Èôê**: \`tabs\`, \`tabGroups\`, \`activeTab\`, \`storage\`
          - **ÂØæÂøú„Éñ„É©„Ç¶„Ç∂**: ChromeÔºàChromiumÁ≥ª„Éñ„É©„Ç¶„Ç∂„Åß„ÇÇÂãï‰ΩúÂèØËÉΩÔºâ
          
          ---
          
          <div align="center">
          Made with ‚ù§Ô∏è for better browsing experience
          </div>
          EOF
          
          echo "‚úÖ Release notes generated"
          echo "üìÑ Preview:"
          head -20 release_notes.md
          echo "..."
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Domain Tab Grouper ${{ steps.version.outputs.version }}"
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          files: |
            domain-tab-grouper-${{ steps.version.outputs.version }}.zip
          draft: false
          prerelease: false
          generate_release_notes: false

      - name: Release Summary
        run: |
          echo "üéâ Release created successfully!"
          echo "üì¶ Package: domain-tab-grouper-${{ steps.version.outputs.version }}.zip"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"